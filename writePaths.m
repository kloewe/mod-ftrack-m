function writePaths(p,fname,varargin)
%WRITEPATHS Write paths to file.
%
%   WRITEPATHS(P,FILENAME) writes the paths in P to the file FILENAME. The
%   specified file is created if it doesn't exist and overwritten
%   otherwise. Each line of the resulting file describes one path as a
%   space-delimited list of (the linear indices of) its comprising voxels
%   in the order of traversal. P is is a structure as generated by FTRACK.
%
%   WRITEPATHS(P,FILENAME,'PARAM1',VAL1,'PARAM2','VAL2',...) can be used to
%   specify additional parameters and their values:
%
%      Parameter           Value
%      ---------           -----
%      'CreateParentDirs'  0 or 1
%
%   See also: READPATHS, FILTPATHS, PATHPROPS, FTRACK.
%
%   Author: Kristian Loewe

%% default
doCreateParentDirs = 0;

%% parse arguments
for i = 1:2:numel(varargin)
  pn = varargin{i};   % parameter name
  assert(ischar(pn), 'Parameter names must be of type char.');
  pv = varargin{i+1}; % parameter value
  switch pn
    case 'CreateParentDirs'
      assert(isscalar(pv) && (islogical(pv) || ismember(pv, [0 1])));
      doCreateParentDirs = pv;
    otherwise
      error('Unexpected parameter name.');
  end
end

if doCreateParentDirs
  pdir = fileGetDir(fname);
  if ~exist(pdir, 'dir')
    mkdir(pdir);
  end
end

if 0
  % strOut = cellfun(@(x) sprintf('%s\b\n', sprintf('%u ', x)), paths, ...
  %   'UniformOutput', false);
  strOut = cellfun(@(x) sprintf('%u ', x), p.paths, 'UniformOutput', false);
  strOut = cellfun(@(s) sprintf('%s\n', s(1:end-1)), strOut, ...
    'UniformOutput', false);
  strOut = horzcat(strOut{:});
  fidPathsFilt = fopen(fname, 'w+');
  assert(fidPathsFilt > 0, 'Could not open file %s', fname);
  fprintf(fidPathsFilt, '# dims: %d %d %d\n', int32(p.dims));
  fprintf(fidPathsFilt, '# vsiz: %f %f %f\n', single(p.vsiz));
  fprintf(fidPathsFilt, '%s', strOut);
  fclose(fidPathsFilt);
else
  mxWritePaths(p.paths, int32(p.dims), single(p.vsiz), fname);
end

end
