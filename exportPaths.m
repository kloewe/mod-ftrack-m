function exportPaths(d,fname)
%EXPORTPATHS Export paths to an MRtrix tck-file.
%
%   EXPORTPATHS(P,FNAME) exports the paths in P to the tck-file FNAME, where P
%   is a structure as generated by FTRACK.
%
%   EXPORTPATHS(C,FNAME) exports the paths specified by the cell array of
%   coordinates C (each cell contains the 3D coordinates of one path) to the
%   tck-file FNAME.
%
%   EXPORTPATHS(T,FNAME) exports the paths in T to the tck-file FNAME, where T
%   is a structure of the kind returned by READ_MRTRIX_TRACKS. This is
%   equivalent to using WRITE_MRTRIX_TRACKS(T,FNAME) directly.
%   READ_MRTRIX_TRACKS and WRITE_MRTRIX_TRACKS are part of the MRtrix3
%   software package (http://www.mrtrix.org).
%
%   This function depends on the function WRITE_MRTRIX_TRACKS, which is part
%   part of the MRtrix3 software package (http://www.mrtrix.org).
%
%   Example:
%   p = readPaths('paths.dat');                 % read paths from dat-file
%   p = filtPaths(p, ...);                      % filter them (optional)
%   p = smoothPaths(p);                         % smooth them (optional)
%   h = readImgHdr('image.nii.gz');             % get appropriate header
%   c = applyAffineTransform(p, h.mat);         % apply transform -> coords
%   exportPaths(c, 'tracks.tck');               % export to tck-file
%
%   See also: READ_MRTRIX_TRACKS, WRITE_MRTRIX_TRACKS, FTRACK.
%
%   Author: Kristian Loewe

if isstruct(d)
  if all(isfield(d, {'paths','dims','vsiz'}))
    tracks = struct;                           % input: ftrack format
    tracks.data = pathProps(d, 'Coords');
  elseif all(isfield(d, {'datatype','count','data'}))
    write_mrtrix_tracks(d);                    % input: mrtrix format
  end
elseif iscell(d)                               % input: cell array of coords
  assert(all(cellfun(@isnumeric, d)));
  tracks = struct;
  tracks.data = d;
else
  error('Unexpected input argument.');
end

% transpose arrays if necessary
assert(all(cellfun(@(c) any(size(c) == 3), tracks.data)));
idx = find(cellfun(@(c) sum(size(c) ~= 3), tracks.data), 1);
fmt = find(size(tracks.data{idx}) ~= 3);
if fmt == 2
  tracks.data = cellfun(@(c) c', tracks.data, 'UniformOutput', false);
end

write_mrtrix_tracks(tracks, fname);

end
