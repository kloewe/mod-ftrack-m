function p = readPaths(fname,impl)
%READPATHS Read paths from file.
%
%   P = READPATHS(FILENAME) reads paths from the text file FILENAME and
%   returns P, a structure as generated by FTRACK.
%
%   See also: WRITEPATHS, FILTPATHS, FTRACK.
%
%   Author: Kristian Loewe

p = struct();

if nargin == 1
  impl = 5;
end

if impl ~= 5
  p.paths = fileread(fname);
  p.paths = regexp(p.paths, '\n', 'split');
  p.paths = p.paths(:);
  while p.paths{1}(1) == '#'
    p.paths = p.paths(2:end);
  end
end

p.dims = [];
p.vsiz = [];
fid = fopen(fname, 'r');
assert(fid ~= -1, 'Could not open file.');
line = fgets(fid);
while line(1) == '#'
  C = textscan(line, '%s', 'Delimiter', ':');
  C = C{1};
  line = fgets(fid);
  id = C{1}(3:end);
  switch id
    case 'dims'
      p.dims = sscanf(C{2}, '%d', 3);
      p.dims = p.dims(:)';
    case 'vsiz'
      p.vsiz = sscanf(C{2}, '%f', 3);
      p.vsiz = p.vsiz(:)';
    otherwise
      error('Unexpected identifier found.');
  end
end
fclose(fid);


% paths: cell array of strings -> cell array of numeric arrays

% 1: using an anonymous function
if impl == 1
  p.paths = cellfun(@(s) sscanf(s, '%f'), p.paths, 'UniformOutput', false);

% 2: using a nested function (faster than 1)
elseif impl == 2
  p.paths = cellfun(@convertNested, p.paths, 'UniformOutput', false);

% 3: using a subfunction     (faster than 1)
elseif impl == 3
  p.paths = cellfun(@convertSub, p.paths, 'UniformOutput', false);

% 4: mex                     (slow)
elseif impl == 4
  p.paths = mxReadPaths(p.paths);

% 5: mex + mat2cell          (fastest)
elseif impl == 5
  p.paths = mxReadPaths(fname);
end

p.paths(cellfun('isempty', p.paths)) = [];


function a = convertNested(s)
a = sscanf(s, '%u');
end

end

function a = convertSub(s)
a = sscanf(s, '%u');
end
